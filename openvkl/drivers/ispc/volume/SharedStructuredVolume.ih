// Copyright 2019-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "Volume.ih"
#include "math/box.ih"
#include "math/vec.ih"
#include "../common/Data.ih"
#include "openvkl/VKLDataType.h"

struct GridAccelerator;

enum SharedStructuredVolumeGridType
{
  structured_regular,
  structured_spherical
};

struct SharedStructuredVolume
{
  Volume super;

  uniform Data1D voxelData;
  uniform int voxelType;

  uniform vec3i dimensions;

  uniform SharedStructuredVolumeGridType gridType;
  uniform vec3f gridOrigin;
  uniform vec3f gridSpacing;

  uniform box3f boundingBox;

  uniform vec3f localCoordinatesUpperBound;

  GridAccelerator *uniform accelerator;

  // offsets, in bytes, for one step in x,y,z direction; ONLY valid if
  // bytesPerSlice < 2G.
  uniform uint32 voxelOfs_dx, voxelOfs_dy, voxelOfs_dz;

  void (*uniform transformLocalToObject_varying)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &localCoordinates,
      varying vec3f &objectCoordinates);

  void (*uniform transformObjectToLocal_varying)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &objectCoordinates,
      varying vec3f &localCoordinates);

  void (*uniform getVoxel)(const SharedStructuredVolume *uniform self,
                           const varying vec3i &index,
                           varying float &value);

  varying vec3f (*uniform computeGradient)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &objectCoordinates);

  // required for uniform (scalar) sampling and iterators
  uniform float (*uniform computeSampleUniform)(
      const void *uniform _self, const uniform vec3f &objectCoordinates);

  void (*uniform transformLocalToObject_uniform)(
      const SharedStructuredVolume *uniform self,
      const uniform vec3f &localCoordinates,
      uniform vec3f &objectCoordinates);

  void (*uniform transformObjectToLocal_uniform)(
      const SharedStructuredVolume *uniform self,
      const uniform vec3f &objectCoordinates,
      uniform vec3f &localCoordinates);

  void (*uniform getVoxelUniform)(const SharedStructuredVolume *uniform self,
                                  const uniform vec3i &index,
                                  uniform float &value);
};
