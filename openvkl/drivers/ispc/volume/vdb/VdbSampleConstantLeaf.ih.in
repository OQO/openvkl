// Copyright 2019-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

// ---------------------------------------------------------------------------
// CONSTANT leaf sampling.
//
// Note: We generate files VdbSampleConstantLeaf_<level>.ih from this 
//       template using CMake.
// ---------------------------------------------------------------------------

/*
 * Sample a constant leaf at the given offset, assuming compact data.
 */
inline varying float VdbSampler_sampleConstantFloatLeaf_@VKL_VDB_LEVEL@(
  const uniform float *varying leafPtr,
  const varying vec3ui         &offset)
{
    const varying uint64 voxelIdx =
      __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(offset.x,
                                                                offset.y,
                                                                offset.z);

    assert(voxelIdx < ((varying uint64)1) << 32);
    const varying uint32 v32 = ((varying uint32)voxelIdx);
    return leafPtr[v32];
}

/*
 * Sample a constant leaf at the given offset, assuming strided data.
 */
inline varying float VdbSampler_sampleConstantFloatLeaf_@VKL_VDB_LEVEL@(
  const uniform Data1D *varying leafPtr,
  const varying vec3ui          &offset)
{
    const varying uint64 voxelIdx =
      __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(offset.x,
                                                                offset.y,
                                                                offset.z);

    assert(voxelIdx < ((varying uint64)1) << 32);
    const varying uint32 v32 = ((varying uint32)voxelIdx);
    return get_float_strided(leafPtr, v32);
}

/*
 * Special case: all lanes are sampling the same leaf.
 * This gives us the opportunity to use uniform array indices, at least if
 * all sample points are in the same voxel.
 */

/* assumes compact data */
inline varying float VdbSampler_sampleConstantFloatLeaf_@VKL_VDB_LEVEL@(
  const uniform float *uniform leafPtr,
  const varying vec3ui         &offset)
{
    const varying uint64 voxelIdx =
      __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(offset.x,
                                                                offset.y,
                                                                offset.z);

    assert(voxelIdx < ((varying uint64)1) << 32);
    const varying uint32 v32 = ((varying uint32)voxelIdx);
    uniform uint32 uv32;
    if (reduce_equal(v32, &uv32))
      return leafPtr[uv32];
    else
      return leafPtr[v32];
}

/* assumes strided data */
inline varying float VdbSampler_sampleConstantFloatLeaf_@VKL_VDB_LEVEL@(
  const uniform Data1D *uniform leafPtr,
  const varying vec3ui          &offset)
{
    const varying uint64 voxelIdx =
      __vkl_vdb_domain_offset_to_linear_varying_@VKL_VDB_LEVEL@(offset.x,
                                                                offset.y,
                                                                offset.z);
    assert(voxelIdx < ((varying uint64)1) << 32);
    const varying uint32 v32 = ((varying uint32)voxelIdx);
    uniform uint32 uv32;
    if (reduce_equal(v32, &uv32))
      return get_float(*leafPtr, uv32);
    else
      return get_float(*leafPtr, v32);
}
